// Package compiler contains all of the logic for compiling an AST into bytecode.
package compiler

import (
	"github.com/grantwforsythe/monkeylang/pkg/ast"
	"github.com/grantwforsythe/monkeylang/pkg/code"
	"github.com/grantwforsythe/monkeylang/pkg/object"
)

// Compiler represents a
type Compiler struct {
	instructions code.Instructions
	constants    []object.Object
}

// ByteCode represents a domain-specific language for a domain-specific virtual machine.
// It is called bytecode because the opcode in each instruction is one byte long.
type ByteCode struct {
	Instructions code.Instructions // Instructions represent the instructions generated by the compiler.
	Constants    []object.Object   // Constants represent the constants generated by the compiler.
}

// New initializes a new compiler.
func New() *Compiler {
	return &Compiler{
		instructions: code.Instructions{},
		constants:    []object.Object{},
	}
}

// Compile traverses the nodes in the AST, converting it into bytecode.
func (c *Compiler) Compile(node ast.Node) error {
	// Iterate over the instructions in memory, repeating the fetch-decode-execute cycle like in an actual machine.
	return nil
}

func (c *Compiler) ByteCode() *ByteCode {
	return &ByteCode{
		Instructions: c.instructions,
		Constants:    c.constants,
	}
}
